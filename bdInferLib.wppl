// parses a tree read from a phyjson file and produces a list of internal node ages
var getNodeAges = function(tree){
	if(tree.children.length==0){
		return []
	}
	var leftAges = getNodeAges(tree.children[0])
	var rightAges = getNodeAges(tree.children[1])
	var leftChildAge = leftAges.length==0 ? 0.0 : leftAges[leftAges.length - 1]
	var curAge = leftChildAge + tree.children[0].branch_length
	return leftAges.concat(rightAges).concat([curAge])
}

// an expression that appears commonly in probability formulas arising from the reconstructed birth-death process 
var expTerm = function(t, lambda, mu){
	return Math.exp(-(lambda-mu)*t)
}

// probability of having 0 descendants after time t - useful building block for other expressions
var p_0 = function(t, lambda, mu){
	var expterm = expTerm(t, lambda, mu)
	return mu * (1.0 - expterm)/(lambda - mu*expterm)
}


var log_p_0 = function(t, lambda, mu){
	return Math.log(p_0(t, lambda, mu))
}

// need this for the case mu = 0
var p_0_div_mu = function(t, lambda, mu){
	var expterm = expTerm(t, lambda, mu)
	return (1.0 - expterm)/(lambda - mu*expterm)
}

var log_p_0_div_mu = function(t, lambda, mu){
	return Math.log(p_0_div_mu(t, lambda, mu))
}

// probability of having exactly 1 descendant after time t
var p_1 = function(t, lambda, mu){
	var r = lambda - mu
	var sqrtDenom = lambda - mu * expTerm(t, lambda, mu)
	return r*r*expterm/(sqrtDenom*sqrtDenom)
}

var log_p_1 = function(t, lambda, mu){
	var r = lambda - mu
	var logr = Math.log(r)
	var expterm = expTerm(t, lambda, mu)
	var logDenom = 2.0 * Math.log(lambda - mu * expterm)
	return 2.0*logr - (lambda - mu)*t - logDenom
}

// probability of having n descentants after time t
var p_n = function(t, n, lambda, mu){
	var rho = lambda/mu
	return Math.pow(rho,n-1)*p_1(t,lambda,mu)*Math.pow(p_0(t,lambda,mu),n-1)
}

var log_p_n = function(t,n,lambda,mu){
	var logLambda = Math.log(lambda)
	var logMu = Math.log(mu)
	return (n-1)*(logLambda-logMu)+log_p_1(t,lambda,mu) + (n-1)*log_p_0(t,lambda,mu)
}


// the likelihood of a specific tree (as opposed to just the branching times)
// following Gernhard 2007, this is the likelihood conditional on the age of the first speciation 
// AND the number of surviving taxa
var logLhoodFromSortedAges = function(sortedAges, lambda, mu){
	var logP1Terms = map(function(x){return log_p_1(x, lambda, mu)},sortedAges.slice(0,sortedAges.length-1))
	//console.log(logP1Terms)
	var t = sortedAges[sortedAges.length - 1]
	//console.log(log_p_0(t, lambda, mu))
	//console.log(log_p_0_div_mu(t, lambda, mu))
	var ll = sum(logP1Terms) - (sortedAges.length-1)*log_p_0_div_mu(t, lambda, mu)
	console.log("lambda = "+lambda.toString()+" mu = "+mu.toString()+" ll = "+ll.toString())
	return ll

}

// The inverse of the node age CDF for the birth-death process
// Used for sampling node ages
// Based on the point process representation of the BDP from Gernhard (2007), Eq. 3 on p. 9
var inverseCDFNodeAge = function(y, t, lambda, mu){
	var expterm = expTerm(t, lambda, mu)
	// normalizing constant
	var C = (lambda - mu * expterm)/(1.0 - expterm)
	var s = - (Math.log(C - y*lambda) - Math.log(C - y*mu))/(lambda - mu)
	return s
}

var CDFNodeAge = function(s, t, lambda, mu){
	var exptermT = expTerm(t, lambda, mu)
	var exptermS = expTerm(s, lambda, mu)
	// normalizing constant
	var C = (lambda - mu * exptermT)/(1.0 - exptermT)
	var y = C * (1.0 - exptermS)/(lambda - mu *exptermS)
	return y
}

// log density of the node age distribution - used for factor() statements
var logDensityNodeAge = function(s, t, lambda, mu){
	var exptermT = expTerm(t, lambda, mu)
	var exptermS = expTerm(s, lambda, mu)

	var logr = Math.log(lambda - mu)
	return 2.0*logr - (lambda - mu)*s + Math.log(lambda - mu*exptermT) - 2.0*Math.log(lambda - mu*exptermS) - Math.log(1.0 - exptermT)

}

var getSortedNodeAges = function(tree){
	var ages = getNodeAges(tree)
	var sortedAges = sort(ages)
	return sortedAges
}

// incorporates the observed data by reweighting execution paths according to the data likelihood 
var observeByFactor = function(ages, t, lambda, mu){
	if(ages.length == 0){
		return 0
	}
	factor(logDensityNodeAge(ages[0], t, lambda, mu))
	randomPrint(0.001,"data points ahead:"+ages.length)
	return observeByFactor(ages.slice(1,ages.length),t,lambda,mu)

}

var observeByFactorMinibatch = function(ages, t, lambda, mu, batchSize){
	if(ages.length == 0){
		return 0
	}
	var miniBatch = ages.slice(0,batchSize)
	var logDensities = map(function(x){ return logDensityNodeAge(x, t, lambda, mu)}, miniBatch)
	var totalLogDensity = sum(logDensities)
	factor(totalLogDensity)
	randomPrint(0.001,"data points ahead:"+ages.length)
	return observeByFactorMinibatch(ages.slice(batchSize,ages.length), t, lambda, mu, batchSize)


}

// displays a message with a set probability  - useful for debugging
var randomPrint = function(prob, msg){
	var display = flip(prob)
	if(display){
		console.log(msg)
	}
}

var gaussianKernel = function(prevVal) {
  //console.log("drift Kernel")
  return Gaussian({mu: prevVal, sigma: 0.05*prevVal});
}

// main modelling function - specifies the process for generating the birth-death tree and calls the conditioning
// function (observeByFactor)
var generateBDTimesFactor = function(ages){
	var r = sample(Uniform({a:0.0, b:10.0}),{driftKernel:gaussianKernel})
	var eps = sample(Uniform({a:0.0, b:0.9}),{driftKernel:gaussianKernel})
	var lambda = r/(1.0-eps)
	var mu = eps*lambda
	var t = max(ages)

	observeByFactor(ages, t, lambda, mu)
	//console.log("lambda = "+lambda.toString()+" mu ="+mu.toString())
	return {lambda : lambda,mu : mu}
}

// main modelling function - specifies the process for generating the birth-death tree and calls the conditioning
// function (observeByFactor)
var generateBDTimesFactorSorted = function(sortedAges){
	var r = sample(Uniform({a:0.0, b:10.0}),{driftKernel:gaussianKernel})
	var eps = sample(Uniform({a:0.0, b:0.9}),{driftKernel:gaussianKernel})
	var lambda = r/(1.0-eps)
	var mu = eps*lambda
	var n = sortedAges.length - 1
	var t = sortedAges[sortedAges.length -1]

	observeByFactor(sortedAges, t, lambda, mu)
	//console.log("lambda = "+lambda.toString()+" mu ="+mu.toString())
	return {lambda : lambda,mu : mu}
}


// computes the posterior mean from an array of samples (that's distobject.params.samples)
var getMeanPosterior = function(samples){
	var lambdas = map(function(x){ return x.value.lambda }, samples)
	console.log(lambdas)
	var mus = map(function(x){ return x.value.mu }, samples)
	var lambdaMean = listMean(lambdas)
	var muMean = listMean(mus)
	return {lambda : lambdaMean, mu : muMean}
}

// appears not to exist in webppl
var max = function(lst){
	if(lst.length==1){
		return lst[0]
	}
	if(lst.length==0){
		return -1000000000 //hack just in case, will fix later
	}
	var prevmax = max(lst.slice(1,lst.length))
	var maxval = lst[0] > prevmax ? lst[0] : prevmax
	return maxval
}
